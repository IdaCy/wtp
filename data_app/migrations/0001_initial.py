# Generated by Django 5.0.1 on 2024-01-16 17:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Element',
            fields=[
                ('element_id', models.IntegerField(primary_key=True, serialize=False)),
                ('element_symbol', models.CharField(max_length=10)),
                ('approved', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StudyType',
            fields=[
                ('study_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('study_type_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('salutation', models.CharField(blank=True, choices=[('Mr', 'Mr'), ('Mrs', 'Mrs'), ('Miss', 'Miss'), ('Dr', 'Dr'), ('Professor', 'Professor'), ('Ms', 'Ms'), ('Other', 'Other')], max_length=20, null=True)),
                ('firstname', models.CharField(blank=True, max_length=30, null=True)),
                ('lastname', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('jobtitle', models.CharField(blank=True, max_length=200, null=True)),
                ('company', models.CharField(blank=True, max_length=50, null=True)),
                ('admin_priv', models.SmallIntegerField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Habitat',
            fields=[
                ('habitat_id', models.IntegerField(primary_key=True, serialize=False)),
                ('habitat_specific_type', models.CharField(max_length=200)),
                ('habitat_main_type_id', models.SmallIntegerField()),
                ('approved', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('language_id', models.IntegerField(primary_key=True, serialize=False)),
                ('language', models.CharField(max_length=50)),
                ('approved', models.BooleanField(default=False)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MaterialCRCalc',
            fields=[
                ('cr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('organism', models.IntegerField()),
                ('liver_to_body_ratio', models.DecimalField(decimal_places=2, max_digits=10)),
                ('bone_to_body_ratio', models.DecimalField(decimal_places=2, max_digits=10)),
                ('muscle_to_body_ratio', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_fre_mar_ter', models.CharField(choices=[('F', 'Freshwater'), ('M', 'Marine'), ('T', 'Terrestrial')], max_length=1)),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.element')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('media_id', models.IntegerField(primary_key=True, serialize=False)),
                ('media_type', models.CharField(max_length=50)),
                ('approved', models.BooleanField(default=False)),
                ('habitat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.habitat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MaterialStatus',
            fields=[
                ('material_status_id', models.IntegerField(primary_key=True, serialize=False)),
                ('material_status_name', models.CharField(max_length=50)),
                ('correction_ratio', models.DecimalField(decimal_places=3, max_digits=10)),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.media')),
            ],
        ),
        migrations.CreateModel(
            name='ActivityConcUnit',
            fields=[
                ('act_conc_unit_id', models.AutoField(primary_key=True, serialize=False)),
                ('act_conc_unit_symbol', models.CharField(max_length=50)),
                ('approved', models.BooleanField(default=False)),
                ('correction_factor_act_conc', models.DecimalField(decimal_places=3, max_digits=10)),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.media')),
            ],
        ),
        migrations.CreateModel(
            name='PubType',
            fields=[
                ('pub_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('pub_type_name', models.CharField(max_length=200)),
                ('approved', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PubTitle',
            fields=[
                ('pub_title_id', models.IntegerField(primary_key=True, serialize=False)),
                ('pub_title_name', models.CharField(max_length=200)),
                ('approved', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('pub_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.pubtype')),
            ],
        ),
        migrations.CreateModel(
            name='Radionuclide',
            fields=[
                ('radionuclide_id', models.IntegerField(primary_key=True, serialize=False)),
                ('radionuclide_name', models.CharField(max_length=50)),
                ('approved', models.BooleanField(default=False)),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.element')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RAP',
            fields=[
                ('rap_id', models.IntegerField(primary_key=True, serialize=False)),
                ('rap_name', models.CharField(max_length=200)),
                ('approved', models.BooleanField(default=False)),
                ('summary', models.CharField(max_length=200)),
                ('habitat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.habitat')),
            ],
        ),
        migrations.CreateModel(
            name='Lifestage',
            fields=[
                ('lifestage_id', models.IntegerField(primary_key=True, serialize=False)),
                ('lifestage_name', models.CharField(max_length=50)),
                ('approved', models.BooleanField(default=False)),
                ('rap', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.rap')),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('ref_id', models.IntegerField(primary_key=True, serialize=False)),
                ('author', models.CharField(max_length=500)),
                ('article_title', models.CharField(max_length=500, null=True)),
                ('year', models.CharField(blank=True, default='', max_length=30)),
                ('volume', models.CharField(blank=True, default='', max_length=50)),
                ('part', models.CharField(blank=True, default='', max_length=50)),
                ('pages', models.CharField(blank=True, default='', max_length=50)),
                ('translation', models.CharField(blank=True, default='', max_length=5)),
                ('keyword_1', models.CharField(blank=True, default='', max_length=50)),
                ('keyword_2', models.CharField(blank=True, default='', max_length=50)),
                ('keyword_3', models.CharField(blank=True, default='', max_length=50)),
                ('keyword_4', models.CharField(blank=True, default='', max_length=50)),
                ('notes', models.CharField(blank=True, default='', max_length=500)),
                ('dc_id', models.IntegerField()),
                ('approval_status', models.CharField(max_length=20)),
                ('reason_approval_delete', models.CharField(blank=True, default='', max_length=500)),
                ('language', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.language')),
                ('pub_title', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.pubtitle')),
                ('pub_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.pubtype')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpeciesName',
            fields=[
                ('species_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name_latin', models.CharField(max_length=200)),
                ('name_common', models.CharField(max_length=200)),
                ('approved', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tissue',
            fields=[
                ('tissue_id', models.IntegerField(primary_key=True, serialize=False)),
                ('approved', models.BooleanField(default=False)),
                ('correction_factor_tissue', models.DecimalField(decimal_places=3, max_digits=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WildlifeGroup',
            fields=[
                ('wildlife_group_id', models.IntegerField(primary_key=True, serialize=False)),
                ('wildlife_group_name', models.CharField(max_length=200)),
                ('approved', models.BooleanField(default=False)),
                ('data_extract', models.IntegerField()),
                ('de_tophab_topwild', models.IntegerField()),
                ('de_tophab_indwild', models.IntegerField()),
                ('de_indhab_topwild', models.IntegerField()),
                ('de_indhab_indwild', models.IntegerField()),
                ('habitat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.habitat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='rap',
            name='wildlife_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.wildlifegroup'),
        ),
        migrations.CreateModel(
            name='ParCRCalc',
            fields=[
                ('cr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('dry_to_wet_ratio', models.DecimalField(decimal_places=2, max_digits=3)),
                ('ash_to_wet_ratio', models.DecimalField(decimal_places=2, max_digits=3)),
                ('is_fre_mar_ter', models.CharField(choices=[('F', 'Freshwater'), ('M', 'Marine'), ('T', 'Terrestrial')], max_length=1)),
                ('tissue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.tissue')),
                ('wildlife_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_app.wildlifegroup')),
            ],
        ),
        migrations.CreateModel(
            name='DataCR',
            fields=[
                ('cr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('measurement_date', models.CharField(max_length=50, null=True)),
                ('crn', models.IntegerField(null=True)),
                ('cr', models.DecimalField(decimal_places=10, max_digits=25, null=True)),
                ('cr_sd', models.DecimalField(decimal_places=10, max_digits=25, null=True)),
                ('notes', models.CharField(max_length=500, null=True)),
                ('from_erica', models.BooleanField(default=False)),
                ('accepted', models.BooleanField(default=False)),
                ('biohalflife', models.CharField(max_length=30, null=True)),
                ('biota_conc', models.CharField(max_length=30, null=True)),
                ('biota_conc_units', models.CharField(blank=True, choices=[('µCi/kg', 'µCi/kg'), ('Bq/kg', 'Bq/kg'), ('Bg/kg fresh', 'Bg/kg fresh'), ('Bg/kg FW', 'Bg/kg FW'), ('Bq/l', 'Bq/l'), ('mg/kg fresh', 'mg/kg fresh'), ('mg/kg', 'mg/kg'), ('mg/kg FW', 'mg/kg FW'), ('Bq/m3', 'Bq/m3')], default='Bq/kg', max_length=20, null=True)),
                ('biota_n', models.IntegerField(null=True)),
                ('biota_sd', models.CharField(max_length=30, null=True)),
                ('biota_wet_dry', models.CharField(blank=True, choices=[('W', 'Wet'), ('D', 'Dry'), ('A', 'Air')], default='W', max_length=20, null=True)),
                ('data_extract', models.IntegerField(null=True)),
                ('media_conc', models.CharField(max_length=30, null=True)),
                ('media_n', models.CharField(max_length=30, null=True)),
                ('media_conc_units', models.CharField(blank=True, choices=[('Bq/kg', 'Bq/kg'), ('Bq/l', 'Bq/l'), ('Bq/m3', 'Bq/m3'), ('mBq/l', 'mBq/l'), ('mg/kg', 'mg/kg')], default='Bq/kg', max_length=20, null=True)),
                ('media_sd', models.CharField(max_length=30, null=True)),
                ('media_wet_dry', models.CharField(blank=True, choices=[('W', 'Wet'), ('D', 'Dry'), ('A', 'Air')], default='W', max_length=5, null=True)),
                ('other_tissue', models.CharField(max_length=30, null=True)),
                ('qc', models.BooleanField(default=False)),
                ('rep_organ_units', models.CharField(max_length=30, null=True)),
                ('reproductive_organ', models.CharField(max_length=30, null=True)),
                ('rep_wet_dry', models.CharField(blank=True, choices=[('W', 'Wet'), ('D', 'Dry'), ('A', 'Air')], default='W', max_length=5, null=True)),
                ('stand_biota_conc', models.DecimalField(decimal_places=3, max_digits=10, null=True)),
                ('stand_biota_sd', models.CharField(max_length=30, null=True)),
                ('stand_media_conc', models.DecimalField(decimal_places=3, max_digits=10, null=True)),
                ('stand_media_sd', models.CharField(max_length=30, null=True)),
                ('summary_approve', models.BooleanField(default=False)),
                ('approval_data_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('habitat', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.habitat')),
                ('lifestage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.lifestage')),
                ('media', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.media')),
                ('radionuclide', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.radionuclide')),
                ('icrp_rap', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.rap')),
                ('reference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.reference')),
                ('species_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.speciesname')),
                ('study_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.studytype')),
                ('tissue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.tissue')),
                ('wildlife_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data_app.wildlifegroup')),
            ],
        ),
    ]
